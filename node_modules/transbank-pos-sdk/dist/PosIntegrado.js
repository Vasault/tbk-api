"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var POSBase = require('./PosBase');

var FUNCTION_CODE_MULTICODE_SALE = '0271';

module.exports = /*#__PURE__*/function (_POSBase) {
  (0, _inherits2["default"])(POSIntegrado, _POSBase);

  var _super = _createSuper(POSIntegrado);

  function POSIntegrado() {
    (0, _classCallCheck2["default"])(this, POSIntegrado);
    return _super.apply(this, arguments);
  }

  (0, _createClass2["default"])(POSIntegrado, [{
    key: "closeDay",
    value:
    /*
     |--------------------------------------------------------------------------
     | POS Methods
     |--------------------------------------------------------------------------
     */
    function closeDay() {
      var _this = this;

      return this.send("0500||").then(function (data) {
        var chunks = data.split("|");
        return {
          functionCode: parseInt(chunks[0]),
          responseCode: parseInt(chunks[1]),
          commerceCode: parseInt(chunks[2]),
          terminalId: chunks[3],
          responseMessage: _this.getResponseMessage(parseInt(chunks[1])),
          successful: parseInt(chunks[1]) === 0
        };
      });
    }
  }, {
    key: "getLastSale",
    value: function getLastSale() {
      var _this2 = this;

      return this.send("0250|").then(function (data) {
        try {
          return _this2.saleResponse(data);
        } catch (e) {
          throw new Error(e.getMessage());
        }
      });
    }
  }, {
    key: "getTotals",
    value: function getTotals() {
      var _this3 = this;

      return this.send("0700||").then(function (data) {
        var chunks = data.split("|");
        return {
          functionCode: parseInt(chunks[0]),
          responseCode: parseInt(chunks[1]),
          txCount: parseInt(chunks[2]),
          txTotal: parseInt(chunks[3]),
          responseMessage: _this3.getResponseMessage(parseInt(chunks[1])),
          successful: parseInt(chunks[1]) === 0
        };
      });
    }
  }, {
    key: "salesDetail",
    value: function salesDetail() {
      var _this4 = this;

      var printOnPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      return new Promise(function (resolve, reject) {
        if (typeof printOnPos !== 'boolean' && typeof printOnPos !== 'string') {
          return reject(new Error("printOnPos must be of type boolean."));
        }

        if (typeof printOnPos === 'string') {
          printOnPos = printOnPos === 'true' || printOnPos === '1';
        }

        var print = printOnPos ? "0" : "1";
        var sales = [];

        var promise = _this4.send("0260|".concat(print, "|"), !printOnPos, onEverySale.bind(_this4));

        if (printOnPos) {
          resolve(promise);
        }

        function onEverySale(sale) {
          var detail = this.saleDetailResponse(sale.toString().slice(1, -2));

          if (detail.authorizationCode === "" || detail.authorizationCode === null) {
            resolve(sales);
            return;
          }

          sales.push(detail);
        }
      });
    }
  }, {
    key: "refund",
    value: function refund(operationId) {
      var _this5 = this;

      if (typeof operationId === "undefined") {
        throw new Error("Operation ID not provided when calling refund method.");
      }

      operationId = operationId.toString().slice(0, 6);
      return this.send("1200|".concat(operationId, "|")).then(function (data) {
        var chunks = data.split("|");
        return {
          functionCode: parseInt(chunks[0]),
          responseCode: parseInt(chunks[1]),
          commerceCode: parseInt(chunks[2]),
          terminalId: chunks[3],
          authorizationCode: chunks[4].trim(),
          operationId: chunks[5],
          responseMessage: _this5.getResponseMessage(parseInt(chunks[1])),
          successful: parseInt(chunks[1]) === 0
        };
      });
    }
  }, {
    key: "changeToNormalMode",
    value: function changeToNormalMode() {
      return this.send("0300", false);
    }
  }, {
    key: "sale",
    value: function sale(amount, ticket) {
      var _this6 = this;

      var sendStatus = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var callback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      amount = amount.toString().padStart(9, "0").slice(0, 9);
      ticket = ticket.toString().padStart(6, "0").slice(0, 6);
      var status = sendStatus ? "1" : "0";
      return this.send("0200|".concat(amount, "|").concat(ticket, "|||").concat(status), true, callback).then(function (data) {
        return _this6.saleResponse(data);
      });
    }
  }, {
    key: "multicodeSale",
    value: function multicodeSale(amount, ticket) {
      var _this7 = this;

      var commerceCode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var sendStatus = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      var callback = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
      amount = amount.toString().padStart(9, "0").slice(0, 9);
      ticket = ticket.toString().padStart(6, "0").slice(0, 6);
      commerceCode = commerceCode === null ? '0' : commerceCode;
      var status = sendStatus ? "1" : "0";
      return this.send("0270|".concat(amount, "|").concat(ticket, "|||").concat(status, "|").concat(commerceCode), true, callback).then(function (data) {
        return _this7.saleResponse(data);
      });
    }
    /*
     |--------------------------------------------------------------------------
     | Responses
     |--------------------------------------------------------------------------
     */

  }, {
    key: "saleDetailResponse",
    value: function saleDetailResponse(payload) {
      var chunks = payload.split("|");
      var authorizationCode = typeof chunks[5] !== 'undefined' ? chunks[5].trim() : null;
      return {
        functionCode: parseInt(chunks[0]),
        responseCode: parseInt(chunks[1]),
        commerceCode: parseInt(chunks[2]),
        terminalId: chunks[3],
        responseMessage: this.getResponseMessage(parseInt(chunks[1])),
        successful: parseInt(chunks[1]) === 0,
        ticket: chunks[4],
        authorizationCode: authorizationCode,
        amount: chunks[6],
        last4Digits: parseInt(chunks[7]),
        operationNumber: chunks[8],
        cardType: chunks[9],
        accountingDate: chunks[10],
        accountNumber: chunks[11],
        cardBrand: chunks[12],
        realDate: chunks[13],
        realTime: chunks[14],
        employeeId: chunks[15],
        tip: parseInt(chunks[16]),
        feeAmount: chunks[16],
        feeNumber: chunks[17]
      };
    }
  }, {
    key: "saleResponse",
    value: function saleResponse(payload) {
      var chunks = payload.split("|");
      var authorizationCode = typeof chunks[5] !== 'undefined' ? chunks[5].trim() : null;
      var response = {
        functionCode: parseInt(chunks[0]),
        responseCode: parseInt(chunks[1]),
        commerceCode: parseInt(chunks[2]),
        terminalId: chunks[3],
        responseMessage: this.getResponseMessage(parseInt(chunks[1])),
        successful: parseInt(chunks[1]) === 0,
        ticket: chunks[4],
        authorizationCode: authorizationCode,
        amount: parseInt(chunks[6]),
        sharesNumber: chunks[7],
        sharesAmount: chunks[8],
        last4Digits: chunks[9] !== '' ? parseInt(chunks[9]) : null,
        operationNumber: chunks[10],
        cardType: chunks[11],
        accountingDate: chunks[12],
        accountNumber: chunks[13],
        cardBrand: chunks[14],
        realDate: chunks[15],
        realTime: chunks[16],
        employeeId: chunks[17],
        tip: chunks[18] !== '' ? parseInt(chunks[18]) : null
      };

      if (chunks[0] === FUNCTION_CODE_MULTICODE_SALE) {
        response.change = chunks[20];
        response.commerceCode = chunks[21];
      }

      return response;
    }
  }]);
  return POSIntegrado;
}(POSBase);